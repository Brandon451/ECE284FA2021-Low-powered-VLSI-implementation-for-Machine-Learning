$date
	Mon Oct 18 14:34:48 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mac_tb $end
$var wire 16 ! out [15:0] $end
$var reg 4 " a [3:0] $end
$var reg 4 # b [3:0] $end
$var reg 16 $ c [15:0] $end
$var reg 1 % clk $end
$var reg 16 & expected_out [15:0] $end
$var integer 32 ' i [31:0] $end
$var integer 32 ( w_dec [31:0] $end
$var integer 32 ) w_file [31:0] $end
$var integer 32 * w_scan_file [31:0] $end
$var integer 32 + x_dec [31:0] $end
$var integer 32 , x_file [31:0] $end
$var integer 32 - x_scan_file [31:0] $end
$scope function mac_predicted $end
$var reg 4 . a [3:0] $end
$var reg 5 / a_signed [4:0] $end
$var reg 4 0 b [3:0] $end
$var reg 16 1 c [15:0] $end
$var reg 8 2 product [7:0] $end
$upscope $end
$scope function w_bin $end
$var integer 32 3 weight [31:0] $end
$upscope $end
$scope function x_bin $end
$var integer 32 4 activ [31:0] $end
$upscope $end
$scope module mac_wrapper_instance $end
$var wire 4 5 a [3:0] $end
$var wire 4 6 b [3:0] $end
$var wire 16 7 c [15:0] $end
$var wire 1 % clk $end
$var wire 16 8 out [15:0] $end
$var reg 4 9 a_q [3:0] $end
$var reg 4 : b_q [3:0] $end
$var reg 16 ; c_q [15:0] $end
$scope module mac_instance $end
$var wire 4 < a [3:0] $end
$var wire 4 = b [3:0] $end
$var wire 16 > c [15:0] $end
$var wire 1 ? clk $end
$var wire 8 @ product [7:0] $end
$var wire 16 A out [15:0] $end
$var wire 5 B a_signed [4:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0xxxx B
bx A
bx @
z?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
b10000000000000000000000000000100 ,
bx +
bx *
b10000000000000000000000000000011 )
bx (
bx '
b0 &
0%
bx $
bx #
bx "
bx !
$end
#2
1%
#3
b0 '
0%
#4
1%
#5
b1 '
b110 &
b110 2
b110 /
b110 .
b1 0
b0 1
b0 $
b0 7
b1 #
b1 6
b1 3
b110 "
b110 5
b0 4
b1 -
b110 +
b1 *
b1 (
0%
#6
b110 !
b110 8
b110 A
b0 ;
b0 >
b110 @
b110 B
b110 9
b110 <
b1 :
b1 =
1%
#7
b10 '
b1111111111010101 &
b11001111 2
b111 /
b111 .
b1001 0
b110 1
b110 $
b110 7
b1001 #
b1001 6
b1 3
b111 "
b111 5
b1 4
b111 +
b11111111111111111111111111111001 (
0%
#8
b110 ;
b110 >
b111 B
b111 9
b111 <
b1111111111010101 !
b1111111111010101 8
b1111111111010101 A
b11001111 @
b1001 :
b1001 =
1%
#9
b11 '
b1111111111011100 &
b111 2
b1 /
b1 .
b111 0
b1111111111010101 1
b1111111111010101 $
b1111111111010101 7
b111 #
b111 6
b1 3
b1 "
b1 5
b1 +
b111 (
0%
#10
b1111111111010101 ;
b1111111111010101 >
b1 B
b1 9
b1 <
b1111111111011100 !
b1111111111011100 8
b1111111111011100 A
b111 @
b111 :
b111 =
1%
#11
b100 '
b1111111111010000 &
b11110100 2
b11 /
b11 .
b1100 0
b1111111111011100 1
b1111111111011100 $
b1111111111011100 7
b1100 #
b1100 6
b0 3
b11 "
b11 5
b1 4
b11 +
b11111111111111111111111111111100 (
0%
#12
b1111111111011100 ;
b1111111111011100 >
b11 B
b11 9
b11 <
b1111111111010000 !
b1111111111010000 8
b1111111111010000 A
b11110100 @
b1100 :
b1100 =
1%
#13
b101 '
b1111111111001010 &
b11111010 2
b10 /
b10 .
b1101 0
b1111111111010000 1
b1111111111010000 $
b1111111111010000 7
b1101 #
b1101 6
b1 3
b10 "
b10 5
b0 4
b10 +
b11111111111111111111111111111101 (
0%
#14
b1111111111010000 ;
b1111111111010000 >
b10 B
b10 9
b10 <
b1111111111001010 !
b1111111111001010 8
b1111111111001010 A
b11111010 @
b1101 :
b1101 =
1%
#15
b110 '
b1111111111000110 &
b11111100 2
b1110 0
b1111111111001010 1
b1111111111001010 $
b1111111111001010 7
b1110 #
b1110 6
b0 3
b0 4
b11111111111111111111111111111110 (
0%
#16
b1111111111001010 ;
b1111111111001010 >
b1111111111000110 !
b1111111111000110 8
b1111111111000110 A
b11111100 @
b1110 :
b1110 =
1%
#17
b111 '
b1111111111000010 &
b1 /
b1 .
b1100 0
b1111111111000110 1
b1111111111000110 $
b1111111111000110 7
b1100 #
b1100 6
b0 3
b1 "
b1 5
b1 4
b1 +
b11111111111111111111111111111100 (
0%
#18
b1111111111000110 ;
b1111111111000110 >
b1 B
b1 9
b1 <
b1111111111000010 !
b1111111111000010 8
b1111111111000010 A
b11111100 @
b1100 :
b1100 =
1%
#19
b1000 '
b1111111111010110 &
b10100 2
b100 /
b100 .
b101 0
b1111111111000010 1
b1111111111000010 $
b1111111111000010 7
b101 #
b101 6
b1 3
b100 "
b100 5
b0 4
b100 +
b101 (
0%
#20
b1111111111000010 ;
b1111111111000010 >
b100 B
b100 9
b100 <
b1111111111010110 !
b1111111111010110 8
b1111111111010110 A
b10100 @
b101 :
b101 =
1%
#21
b1001 '
b1111111110110010 &
b11011100 2
b110 /
b110 .
b1010 0
b1111111111010110 1
b1111111111010110 $
b1111111111010110 7
b1010 #
b1010 6
b0 3
b110 "
b110 5
b0 4
b110 +
b11111111111111111111111111111010 (
0%
#22
b1111111111010110 ;
b1111111111010110 >
b110 B
b110 9
b110 <
b1111111110110010 !
b1111111110110010 8
b1111111110110010 A
b11011100 @
b1010 :
b1010 =
1%
#23
b1010 '
b1111111111000010 &
b10000 2
b100 /
b100 .
b100 0
b1111111110110010 1
b1111111110110010 $
b1111111110110010 7
b100 #
b100 6
b0 3
b100 "
b100 5
b0 4
b100 +
b100 (
0%
#24
b1111111110110010 ;
b1111111110110010 >
b100 B
b100 9
b100 <
b1111111111000010 !
b1111111111000010 8
b1111111111000010 A
b10000 @
b100 :
b100 =
1%
#25
0%
#35
